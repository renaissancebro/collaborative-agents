#!/bin/bash

# Gemini Loop - Code Issue Detection Agent
# This script continuously scans the codebase for issues and writes TODOs

set -euo pipefail

# Configuration
CODEBASE_DIR="../codebase"
POSTBOX_DIR="../postbox"
TODO_FILE="$POSTBOX_DIR/todo.md"
LOG_FILE="$POSTBOX_DIR/gemini.log"
SCAN_INTERVAL=300  # 5 minutes in seconds
LOCK_FILE="/tmp/gemini_loop.lock"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" | tee -a "$LOG_FILE"
}

# Check if Gemini CLI is available
check_gemini_cli() {
    if ! command -v gemini &> /dev/null; then
        error "Gemini CLI not found. Please install it first."
        error "Install with: npm install -g @google/generative-ai-cli"
        exit 1
    fi
}

# Check if required directories exist
check_directories() {
    if [ ! -d "$CODEBASE_DIR" ]; then
        error "Codebase directory not found: $CODEBASE_DIR"
        exit 1
    fi
    
    mkdir -p "$POSTBOX_DIR"
    
    if [ ! -f "$TODO_FILE" ]; then
        echo "# Code Issues TODO List" > "$TODO_FILE"
        echo "" >> "$TODO_FILE"
        echo "Generated by Gemini Agent on $(date)" >> "$TODO_FILE"
        echo "" >> "$TODO_FILE"
    fi
}

# Create lock file to prevent multiple instances
create_lock() {
    if [ -f "$LOCK_FILE" ]; then
        local pid=$(cat "$LOCK_FILE" 2>/dev/null || echo "")
        if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
            error "Another instance is already running (PID: $pid)"
            exit 1
        else
            warn "Removing stale lock file"
            rm -f "$LOCK_FILE"
        fi
    fi
    
    echo $$ > "$LOCK_FILE"
    trap cleanup EXIT
}

cleanup() {
    rm -f "$LOCK_FILE"
    info "Gemini loop stopped"
}

# Scan codebase for issues using Gemini
scan_codebase() {
    info "üîç Scanning codebase for issues..."
    
    # Find all Python and JavaScript/Node.js files
    local files=$(find "$CODEBASE_DIR" -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) | head -20)
    
    if [ -z "$files" ]; then
        warn "No code files found in $CODEBASE_DIR"
        return 0
    fi
    
    local temp_analysis="/tmp/gemini_analysis.md"
    local issues_found=0
    
    # Create a comprehensive analysis prompt
    cat > /tmp/gemini_prompt.txt << 'EOF'
You are a senior code reviewer and static analysis expert. Analyze the provided code files for:

1. Code smells and bad practices
2. Performance issues
3. Security vulnerabilities
4. Style inconsistencies
5. Logic errors or potential bugs
6. Maintainability issues
7. Missing error handling
8. Inefficient algorithms

For each issue found, provide a TODO item in this exact format:
- [ ] Fix [issue_type] in [filename] at line [line_number]: [specific_description]

Example:
- [ ] Fix code smell in user_service.py at line 42: Replace nested if statements with early returns
- [ ] Fix performance issue in data_processor.js at line 18: Use Map instead of nested loops for O(n) lookup

Only return TODO items, no other commentary. Be specific about file names and line numbers.
EOF

    # Process each file
    for file in $files; do
        local relative_path=$(realpath --relative-to="$CODEBASE_DIR" "$file")
        info "   Analyzing: $relative_path"
        
        # Create analysis for this file
        {
            echo "File: $relative_path"
            echo "```"
            cat "$file"
            echo "```"
            echo ""
        } > /tmp/current_file.txt
        
        # Run Gemini analysis
        if gemini generate --model="gemini-1.5-flash" --prompt-file=/tmp/gemini_prompt.txt --input-file=/tmp/current_file.txt --output-format=text > /tmp/file_analysis.txt 2>/dev/null; then
            # Check if analysis contains TODO items
            if grep -q "^- \[ \]" /tmp/file_analysis.txt; then
                cat /tmp/file_analysis.txt >> "$temp_analysis"
                echo "" >> "$temp_analysis"
                ((issues_found++))
            fi
        else
            warn "Failed to analyze $relative_path"
        fi
        
        # Rate limiting - don't overwhelm the API
        sleep 2
    done
    
    # Update TODO file if issues were found
    if [ $issues_found -gt 0 ]; then
        # Backup existing TODO file
        cp "$TODO_FILE" "${TODO_FILE}.backup"
        
        # Create new TODO file with header
        {
            echo "# Code Issues TODO List"
            echo ""
            echo "Last updated: $(date)"
            echo "Issues found: $issues_found"
            echo ""
            echo "## Pending Issues"
            echo ""
            cat "$temp_analysis"
        } > "$TODO_FILE"
        
        success "Found $issues_found issues and updated TODO list"
    else
        info "No new issues found"
    fi
    
    # Cleanup
    rm -f /tmp/gemini_analysis.md /tmp/current_file.txt /tmp/file_analysis.txt /tmp/gemini_prompt.txt
}

# Monitor for changes in codebase
monitor_changes() {
    local last_scan=$(date +%s)
    local change_detected=false
    
    while true; do
        # Check if any files have been modified recently
        local recent_files=$(find "$CODEBASE_DIR" -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) -newer "$TODO_FILE" 2>/dev/null | wc -l)
        
        if [ "$recent_files" -gt 0 ]; then
            change_detected=true
            info "üìù Code changes detected, scheduling scan..."
        fi
        
        # Check if enough time has passed or changes were detected
        local current_time=$(date +%s)
        local time_diff=$((current_time - last_scan))
        
        if [ $time_diff -ge $SCAN_INTERVAL ] || [ "$change_detected" = true ]; then
            scan_codebase
            last_scan=$current_time
            change_detected=false
        fi
        
        sleep 30  # Check every 30 seconds
    done
}

# Main execution
main() {
    info "üöÄ Starting Gemini Code Analysis Agent"
    
    # Pre-flight checks
    check_gemini_cli
    check_directories
    create_lock
    
    # Initial scan
    scan_codebase
    
    # Start monitoring loop
    info "üìä Starting monitoring loop (scanning every $SCAN_INTERVAL seconds)"
    monitor_changes
}

# Handle script termination
handle_signal() {
    info "Received termination signal, shutting down..."
    cleanup
    exit 0
}

trap handle_signal SIGINT SIGTERM

# Run main function
main "$@"