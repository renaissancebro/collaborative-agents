#!/bin/bash

# Cleanup script for Dual-Agent Code Review System

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Stop running agents
stop_agents() {
    info "Stopping running agents..."
    
    # Stop Gemini agent
    if pgrep -f "gemini_loop.sh" > /dev/null; then
        pkill -f "gemini_loop.sh" && success "Stopped Gemini agent" || warn "Failed to stop Gemini agent"
    else
        info "Gemini agent not running"
    fi
    
    # Stop Claude agent
    if pgrep -f "claude_loop.sh" > /dev/null; then
        pkill -f "claude_loop.sh" && success "Stopped Claude agent" || warn "Failed to stop Claude agent"
    else
        info "Claude agent not running"
    fi
    
    # Wait for processes to terminate
    sleep 2
}

# Clean lock files
clean_locks() {
    info "Cleaning lock files..."
    
    local lock_files=(
        "/tmp/gemini_loop.lock"
        "/tmp/claude_loop.lock"
    )
    
    for lock_file in "${lock_files[@]}"; do
        if [ -f "$lock_file" ]; then
            rm -f "$lock_file" && success "Removed $lock_file" || warn "Failed to remove $lock_file"
        fi
    done
}

# Clean temporary files
clean_temp_files() {
    info "Cleaning temporary files..."
    
    local temp_patterns=(
        "/tmp/gemini_*.txt"
        "/tmp/claude_*.txt"
        "/tmp/current_file.txt"
        "/tmp/file_analysis.txt"
        "/tmp/gemini_prompt.txt"
        "/tmp/claude_fix_prompt.txt"
        "/tmp/claude_response.json"
    )
    
    for pattern in "${temp_patterns[@]}"; do
        if ls $pattern 1> /dev/null 2>&1; then
            rm -f $pattern && success "Cleaned temporary files: $pattern"
        fi
    done
}

# Archive logs
archive_logs() {
    info "Archiving logs..."
    
    local postbox_dir="../postbox"
    local archive_dir="$postbox_dir/archive"
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    
    if [ -d "$postbox_dir" ]; then
        mkdir -p "$archive_dir"
        
        # Archive log files
        for log_file in "$postbox_dir"/*.log; do
            if [ -f "$log_file" ]; then
                local basename=$(basename "$log_file" .log)
                cp "$log_file" "$archive_dir/${basename}_${timestamp}.log"
                > "$log_file"  # Clear the current log file
                success "Archived $(basename "$log_file")"
            fi
        done
    fi
}

# Clean backup files
clean_backups() {
    info "Cleaning backup files..."
    
    local codebase_dir="../codebase"
    
    if [ -d "$codebase_dir" ]; then
        find "$codebase_dir" -name "*.backup" -type f -exec rm -f {} \; 2>/dev/null || true
        success "Cleaned backup files in codebase"
    fi
    
    # Clean postbox backups
    local postbox_dir="../postbox"
    if [ -d "$postbox_dir" ]; then
        find "$postbox_dir" -name "*.backup" -type f -exec rm -f {} \; 2>/dev/null || true
        success "Cleaned backup files in postbox"
    fi
}

# Reset postbox files
reset_postbox() {
    info "Resetting postbox files..."
    
    local postbox_dir="../postbox"
    
    if [ -d "$postbox_dir" ]; then
        # Reset todo.md
        cat > "$postbox_dir/todo.md" << EOF
# Code Issues TODO List

Generated by Gemini Agent on $(date)

## Pending Issues

(This file will be populated by the Gemini agent when it detects issues)
EOF
        success "Reset todo.md"
        
        # Reset completed-todos.md
        cat > "$postbox_dir/completed-todos.md" << EOF
# Completed TODO Items

Generated by Claude Agent on $(date)

(This file will be populated by the Claude agent when it completes fixes)
EOF
        success "Reset completed-todos.md"
    fi
}

# Show disk space saved
show_cleanup_summary() {
    info "Cleanup summary:"
    echo "  â€¢ Agents stopped"
    echo "  â€¢ Lock files removed"
    echo "  â€¢ Temporary files cleaned"
    echo "  â€¢ Logs archived"
    echo "  â€¢ Backup files cleaned"
    echo "  â€¢ Postbox files reset"
}

# Interactive cleanup options
interactive_cleanup() {
    echo "ðŸ§¹ Dual-Agent System Cleanup"
    echo "============================"
    echo ""
    echo "Select cleanup options:"
    echo "1) Stop agents only"
    echo "2) Clean temporary files"
    echo "3) Archive logs"
    echo "4) Clean backup files"
    echo "5) Reset postbox files"
    echo "6) Full cleanup (all of the above)"
    echo "7) Exit"
    echo ""
    
    read -p "Enter your choice (1-7): " choice
    
    case $choice in
        1)
            stop_agents
            ;;
        2)
            clean_temp_files
            ;;
        3)
            archive_logs
            ;;
        4)
            clean_backups
            ;;
        5)
            reset_postbox
            ;;
        6)
            stop_agents
            clean_locks
            clean_temp_files
            archive_logs
            clean_backups
            reset_postbox
            show_cleanup_summary
            ;;
        7)
            info "Cleanup cancelled"
            exit 0
            ;;
        *)
            error "Invalid choice"
            exit 1
            ;;
    esac
}

# Force cleanup (non-interactive)
force_cleanup() {
    warn "Performing force cleanup..."
    stop_agents
    clean_locks
    clean_temp_files
    archive_logs
    clean_backups
    reset_postbox
    show_cleanup_summary
}

# Main function
main() {
    # Check if in correct directory
    if [ ! -d "../postbox" ]; then
        error "Run this script from the helpers/ directory"
        exit 1
    fi
    
    case "${1:-interactive}" in
        --force|-f)
            force_cleanup
            ;;
        --stop-only)
            stop_agents
            ;;
        --clean-temp)
            clean_temp_files
            ;;
        --archive-logs)
            archive_logs
            ;;
        --clean-backups)
            clean_backups
            ;;
        --reset-postbox)
            reset_postbox
            ;;
        --help|-h)
            echo "Usage: $0 [option]"
            echo ""
            echo "Options:"
            echo "  --force        Perform full cleanup without prompts"
            echo "  --stop-only    Stop agents only"
            echo "  --clean-temp   Clean temporary files only"
            echo "  --archive-logs Archive log files only"
            echo "  --clean-backups Clean backup files only"
            echo "  --reset-postbox Reset postbox files only"
            echo "  --help         Show this help"
            echo ""
            echo "Without options, runs in interactive mode"
            ;;
        *)
            interactive_cleanup
            ;;
    esac
    
    success "Cleanup completed!"
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n${YELLOW}Cleanup interrupted${NC}"; exit 130' SIGINT

# Run main function
main "$@"